Index: js/database.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>require('dotenv').config();\r\nimport { createClient } from 'https://cdn.jsdelivr.net/npm/@supabase/supabase-js/+esm'\r\nimport { initClicker } from './clicker.js'\r\n\r\nconst url = process.env.DB_URL\r\nconst key = process.env.DB_KEY\r\nlet telegram = ''\r\nconst supabase = createClient(url, key)\r\n\r\nexport const createUser = async (username, telegramID) => {\r\n    try {\r\n        const { data, error } = await supabase\r\n            .from('Users')\r\n            .insert([{\r\n                username: username,\r\n                telegramID: telegramID,\r\n            }])\r\n\r\n        if (error) throw error\r\n\r\n        return data\r\n    } catch (error) {\r\n        console.log('Ошибка в создании пользователя: ', error)\r\n    }\r\n}\r\n\r\nexport const getUser = async (tg, telegramID) => {\r\n    telegram = tg\r\n    try {\r\n        const { data, error } = await supabase\r\n            .from('Users')\r\n            .select('*')\r\n            .eq('telegramID', telegramID)\r\n            .single()\r\n\r\n        if (error) throw error\r\n\r\n        if (data) {\r\n            const {balance, balanceEarned, username, rank} = data\r\n            setUIUsername(username)\r\n            setUIBalance(balance)\r\n            await initClicker(balance, balanceEarned, rank, telegramID)\r\n            return data\r\n        }\r\n    } catch (error) {\r\n        console.log('Ошибка в получении пользователя: ', error)\r\n        const { username, id } = tg.initDataUnsafe.user\r\n        await createUser(username, id)\r\n        setUIUsername(username)\r\n        setUIBalance(1)\r\n        initClicker(1, 1)\r\n    }\r\n}\r\n\r\nexport const getUserUpgrades = async (telegramID) => {\r\n    try {\r\n        const {data, error} = await supabase\r\n            .from('Users')\r\n            .select('upgrades')\r\n            .eq('telegramID', telegramID)\r\n            .single()\r\n\r\n        if (error) throw error\r\n\r\n        return data\r\n    } catch (error) {\r\n        console.log('Ошибка в получении апгрейдов: ', error)\r\n        throw error\r\n    }\r\n}\r\n\r\nexport const getUserRank = async (telegramID) => {\r\n    try {\r\n        const {data, error} = await supabase\r\n            .from('Users')\r\n            .select('rank')\r\n            .eq('telegramID', telegramID)\r\n            .single()\r\n\r\n        if (error) throw error\r\n        \r\n        return data\r\n    } catch (error) {\r\n        console.log('Ошибка в получении ранга: ', error)\r\n        throw error\r\n    }\r\n}\r\n\r\nexport const setUserRank = async (rank, telegramID) => {\r\n    try {\r\n        const {data, error} = await supabase\r\n            .from('Users')\r\n            .update({\r\n                    rank: rank,\r\n                },\r\n                {\r\n                    returning: 'presentation'\r\n                })\r\n            .match({ telegramID: telegramID })\r\n\r\n        if (error) throw error\r\n\r\n        return data\r\n    } catch (error) {\r\n        console.log('Ошибка в установлении апгрейдов: ', error)\r\n        throw error\r\n    }\r\n}\r\n\r\nexport const setUserUpgrades = async (upgrades, telegramID) => {\r\n    try {\r\n        const {data, error} = await supabase\r\n            .from('Users')\r\n            .update({ upgrades: upgrades }) // Передаем новый объект целиком\r\n            .eq('telegramID', telegramID);\r\n\r\n        if (error) throw error\r\n\r\n        return data\r\n    } catch (error) {\r\n        console.log('Ошибка в установлении апгрейдов: ', error)\r\n        throw error\r\n    }\r\n}\r\n\r\nexport const setUserBalance = async (newBalance, newBalanceEarned, telegramID) => {\r\n    try {\r\n        const { data, error } = await supabase\r\n            .from('Users')\r\n            .update({\r\n                    balance: newBalance,\r\n                    balanceEarned: newBalanceEarned,\r\n                },\r\n                {\r\n                    returning: 'presentation'\r\n                })\r\n            .match({ telegramID: telegramID })\r\n\r\n        if (error) throw error\r\n\r\n        return data\r\n    } catch (error) {\r\n        console.log('Ошибка в установлении баланса: ', error)\r\n        return undefined\r\n    }\r\n}\r\n\r\nexport const setUserName = async (newUsername, telegramID) => {\r\n    try {\r\n        const { data, error } = await supabase\r\n            .from('Users')\r\n            .update({\r\n                    username: newUsername,\r\n                },\r\n                {\r\n                    returning: 'presentation'\r\n                })\r\n            .match({ telegramID: telegramID })\r\n\r\n        if (error) throw error\r\n\r\n        return data\r\n    } catch (error) {\r\n        console.log('Ошибка в установлении username: ', error)\r\n        return undefined\r\n    }\r\n}\r\n\r\nexport const setUIUsername = (username) => {\r\n    const usernameElement = document.querySelector('.username__text')\r\n    usernameElement.innerText = username\r\n}\r\n\r\nexport const setUIBalance = (balance) => {\r\n    const balanceElement = document.querySelector('.stats__value-text')\r\n    balanceElement.innerText = balance\r\n}\r\n\r\nexport const syncBalance = async (balanceInfo = {}, telegramID) => {\r\n    const balanceDetails = balanceInfo\r\n    await setUserBalance(balanceDetails.balance, balanceDetails.balanceEarned, telegramID)\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/js/database.js b/js/database.js
--- a/js/database.js	(revision 961f237fc273b9631636e9ddcc57c7203c0be77d)
+++ b/js/database.js	(date 1759265162205)
@@ -1,4 +1,4 @@
-require('dotenv').config();
+require('dotenv').config()
 import { createClient } from 'https://cdn.jsdelivr.net/npm/@supabase/supabase-js/+esm'
 import { initClicker } from './clicker.js'
 
